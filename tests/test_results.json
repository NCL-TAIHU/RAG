[
  {
    "test": "test_insert_skips_existing_docs (Milvus_SE.TestMilvusSearchEngine.test_insert_skips_existing_docs)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_search_calls_operator_search (Milvus_SE.TestMilvusSearchEngine.test_search_calls_operator_search)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_setup_calls_builder_and_operator (Milvus_SE.TestMilvusSearchEngine.test_setup_calls_builder_and_operator)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_base_chunker_cannot_be_instantiated (chunker.TestChunker.test_base_chunker_cannot_be_instantiated)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_length_chunker_chunk_splits_correctly (chunker.TestChunker.test_length_chunker_chunk_splits_correctly)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_length_chunker_metadata (chunker.TestChunker.test_length_chunker_metadata)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_sentence_chunker_en_splits_correctly (chunker.TestChunker.test_sentence_chunker_en_splits_correctly)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_sentence_chunker_invalid_language_raises (chunker.TestChunker.test_sentence_chunker_invalid_language_raises)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_sentence_chunker_metadata (chunker.TestChunker.test_sentence_chunker_metadata)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_sentence_chunker_zh_splits_correctly (chunker.TestChunker.test_sentence_chunker_zh_splits_correctly)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_build_creates_collection (collection_builder.TestCollectionBuilder.test_build_creates_collection)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_from_config_creates_builder (collection_builder.TestCollectionBuilder.test_from_config_creates_builder)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_get_config_returns_correct_values (collection_builder.TestCollectionBuilder.test_get_config_returns_correct_values)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_get_existing_returns_collection (collection_builder.TestCollectionBuilder.test_get_existing_returns_collection)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_get_existing_returns_none_if_mismatch (collection_builder.TestCollectionBuilder.test_get_existing_returns_none_if_mismatch)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_save_and_load_config (collection_builder.TestCollectionBuilder.test_save_and_load_config)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_litsearch_dataloader (data.TestDataLoaders.test_litsearch_dataloader)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_insert_inserts_new_docs (elastic_SE.TestElasticSearchEngine.test_insert_inserts_new_docs)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_insert_skips_existing_docs (elastic_SE.TestElasticSearchEngine.test_insert_skips_existing_docs)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_search_builds_query_and_returns_ids (elastic_SE.TestElasticSearchEngine.test_search_builds_query_and_returns_ids)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_setup_calls_builder_build (elastic_SE.TestElasticSearchEngine.test_setup_calls_builder_build)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_spec_returns_correct_value (elastic_SE.TestElasticSearchEngine.test_spec_returns_correct_value)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_automodel_embedder (embedder.TestEmbedders.test_automodel_embedder)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_bgem3_embedder (embedder.TestEmbedders.test_bgem3_embedder)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_milvus_bgem3_embedder (embedder.TestEmbedders.test_milvus_bgem3_embedder)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_fetch_routes_and_reranks (manager.TestManager.test_fetch_routes_and_reranks)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_insert_calls_all (manager.TestManager.test_insert_calls_all)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_setup_clears_and_setups (manager.TestManager.test_setup_clears_and_setups)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_automodel_reranker_sorts_by_score (reranker.TestReranker.test_automodel_reranker_sorts_by_score)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_identity_reranker_empty (reranker.TestReranker.test_identity_reranker_empty)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_identity_reranker_returns_same_order (reranker.TestReranker.test_identity_reranker_returns_same_order)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_reranker_interface_raises (reranker.TestReranker.test_reranker_interface_raises)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_router_from_default (router.TestRouter.test_router_from_default)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_router_requires_at_least_one_spec (router.TestRouter.test_router_requires_at_least_one_spec)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_simple_router_always_returns_zero (router.TestRouter.test_simple_router_always_returns_zero)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_sparsity_router_fallback_to_weak (router.TestRouter.test_sparsity_router_fallback_to_weak)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_sparsity_router_prefers_strong_when_field_present (router.TestRouter.test_sparsity_router_prefers_strong_when_field_present)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_sparsity_router_returns_dense_when_no_must_fields (router.TestRouter.test_sparsity_router_returns_dense_when_no_must_fields)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_base_embedder_from_default_dense (test_BaseEmbedder.TestEmbedder.test_base_embedder_from_default_dense)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_base_embedder_from_default_invalid_type_raises (test_BaseEmbedder.TestEmbedder.test_base_embedder_from_default_invalid_type_raises)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_base_embedder_from_default_sparse (test_BaseEmbedder.TestEmbedder.test_base_embedder_from_default_sparse)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_dense_embedder_embed_returns_list (test_BaseEmbedder.TestEmbedder.test_dense_embedder_embed_returns_list)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_dense_embedder_name_and_dim (test_BaseEmbedder.TestEmbedder.test_dense_embedder_name_and_dim)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_milvus_sparse_embedder_embed_returns_csr_array (test_BaseEmbedder.TestEmbedder.test_milvus_sparse_embedder_embed_returns_csr_array)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_sparse_embedder_embed_returns_csr_array (test_BaseEmbedder.TestEmbedder.test_sparse_embedder_embed_returns_csr_array)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_sparse_embedder_name (test_BaseEmbedder.TestEmbedder.test_sparse_embedder_name)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_get_channel_returns_correct (vector_manager.TestVectorManager.test_get_channel_returns_correct)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_get_doc_embeddings_with_cache (vector_manager.TestVectorManager.test_get_doc_embeddings_with_cache)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_get_doc_embeddings_without_cache (vector_manager.TestVectorManager.test_get_doc_embeddings_without_cache)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_get_raw_embedding_dense (vector_manager.TestVectorManager.test_get_raw_embedding_dense)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_get_raw_embedding_sparse (vector_manager.TestVectorManager.test_get_raw_embedding_sparse)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_get_vs_metadata_returns_correct (vector_manager.TestVectorManager.test_get_vs_metadata_returns_correct)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_init_metadata_consistency (vector_manager.TestVectorManager.test_init_metadata_consistency)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_create_dense_vs_via_factory (vector_store.TestVectorStore.test_create_dense_vs_via_factory)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_create_invalid_type_raises_value_error (vector_store.TestVectorStore.test_create_invalid_type_raises_value_error)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_create_sparse_vs_via_factory (vector_store.TestVectorStore.test_create_sparse_vs_via_factory)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_dense_insert_and_retrieve (vector_store.TestVectorStore.test_dense_insert_and_retrieve)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_dense_save_and_load (vector_store.TestVectorStore.test_dense_save_and_load)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_from_existing_dense_vs (vector_store.TestVectorStore.test_from_existing_dense_vs)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_from_existing_missing_metadata_returns_none (vector_store.TestVectorStore.test_from_existing_missing_metadata_returns_none)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_from_existing_sparse_vs (vector_store.TestVectorStore.test_from_existing_sparse_vs)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_sparse_insert_and_retrieve (vector_store.TestVectorStore.test_sparse_insert_and_retrieve)",
    "status": "success",
    "output": ""
  },
  {
    "test": "test_sparse_save_and_load (vector_store.TestVectorStore.test_sparse_save_and_load)",
    "status": "success",
    "output": ""
  }
]